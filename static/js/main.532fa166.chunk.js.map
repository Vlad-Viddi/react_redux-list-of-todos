{"version":3,"sources":["store/index.ts","components/TodoItem.tsx","components/TodosList.tsx","helpers/api.ts","components/LoadingButtons.tsx","components/SortButtons.tsx","App.tsx","index.tsx"],"names":["loadTodos","todos","type","setErrorMessage","message","setSortBy","sortBy","getLoadedTodos","state","isLoading","loading","getMessage","getSortBy","initialState","store","createStore","action","visibleTodos","composeWithDevTools","TodoItem","todo","className","id","completed","user","name","title","TodoList","loadedTodos","useSelector","selector","sortType","sort","a","b","localeCompare","getVisibleTodos","map","key","getUsers","fetch","response","json","usersFromServer","getTodos","todosFromServer","getPreparedTodos","users","preparedTodos","find","userId","LoadingButtons","dispatch","useDispatch","handleLoadClick","todosWithUsers","actionCreator","errorMessage","disabled","role","aria-hidden","onClick","hidden","length","SortButtons","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.532fa166.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst LOAD_TODOS = 'LOAD_TODOS';\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\nconst SORT_BY = 'SORT_BY';\nconst SET_SORTED_TODOS = 'SET_SORTED_TODOS';\n\n// Action creators - a function returning an action object\nexport const loadTodos = ((todos: Todo[]) => ({ type: LOAD_TODOS, todos }));\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\nexport const setErrorMessage = (message = '') => ({ type: SET_ERROR_MESSAGE, message });\nexport const setSortBy = (sortBy = '') => ({ type: SORT_BY, sortBy });\nexport const setSortedTodos = (visibleTodos: Todo[]) => ({ type: SET_SORTED_TODOS, visibleTodos });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getLoadedTodos = (state: RootState) => state.todos;\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getSortBy = (state: RootState) => state.sortBy;\n\n// Initial state\nexport type RootState = {\n  todos: Todo[];\n  loading: boolean;\n  message: string;\n  sortBy: string;\n};\n\nconst initialState: RootState = {\n  todos: [],\n  loading: false,\n  message: '',\n  sortBy: '',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case SET_SORTED_TODOS:\n      return {\n        ...state,\n        todos: action.visibleTodos,\n      };\n    case START_LOADING:\n      return { ...state, loading: true };\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n      };\n    case SET_ERROR_MESSAGE:\n      return {\n        ...state,\n        message: action.message,\n      };\n    case SORT_BY:\n      return {\n        ...state,\n        sortBy: action.sortBy,\n      };\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import React from 'react';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => (\n  <div\n    className=\"card text-white bg-primary mb-3 item\"\n  >\n    <div className=\"card-header\">\n      <span>\n        No.\n        {todo.id}\n      </span>\n      <br />\n      Status:\n      {\n        todo.completed\n          ? ' Finished'\n          : ' Active'\n      }\n    </div>\n    <div className=\"card-body\">\n      <h5 className=\"card-title\">{todo.user ? todo.user.name : 'unknown'}</h5>\n      <p className=\"card-text\">{todo.title}</p>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport * as selector from '../store';\nimport { TodoItem } from './TodoItem';\n\nconst TodoList = () => {\n  const loadedTodos = useSelector(selector.getLoadedTodos);\n  const sortBy = useSelector(selector.getSortBy);\n\n  const getVisibleTodos = (sortType: string, todos: Todo[]) => {\n    switch (sortType) {\n      case 'title':\n        return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n\n      case 'id':\n        return [...todos].sort((a, b) => a.id - b.id);\n\n      case 'user':\n        return [...todos].sort((a, b) => {\n          return a.user && b.user\n            ? a.user?.name.localeCompare(b.user.name)\n            : 0;\n        });\n\n      default:\n        return [...todos];\n    }\n  };\n\n  const visibleTodos = getVisibleTodos(sortBy, loadedTodos);\n\n\n  return (\n    <ul className=\"cards__list\">\n      {visibleTodos.map(todo => (\n        <li key={todo.id}>\n          <TodoItem todo={todo} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","const URL_TODOS = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api/todos.json';\nconst URL_USERS = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api/users.json';\n\nconst getUsers = async (): Promise<PersonFromServer[]> => {\n  const response = await fetch(URL_USERS);\n  const usersFromServer = await response.json();\n\n  return usersFromServer;\n};\n\nconst getTodos = async (): Promise<TodoFromServer[]> => {\n  const response = await fetch(URL_TODOS);\n  const todosFromServer = await response.json();\n\n  return todosFromServer;\n};\n\nexport const getPreparedTodos = async (): Promise<Todo[]> => {\n  const todos = await getTodos();\n  const users = await getUsers();\n  const preparedTodos = todos.map(todo => ({\n    ...todo,\n    user: users.find(user => todo.userId === user.id) as PersonFromServer,\n  }));\n\n  return preparedTodos;\n};\n","/* eslint-disable import/no-duplicates */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPreparedTodos } from '../helpers/api';\nimport * as selector from '../store';\nimport * as actionCreator from '../store';\n\nconst LoadingButtons = () => {\n  const dispatch = useDispatch();\n\n  const handleLoadClick = async () => {\n    dispatch(actionCreator.startLoading()); // dispatch isLoading to true\n\n    try {\n      const todosWithUsers = await getPreparedTodos();\n\n      dispatch(actionCreator.loadTodos(todosWithUsers));\n    } catch (error) {\n      dispatch(actionCreator.finishLoading());\n      dispatch(actionCreator.setErrorMessage('Errors happens, try to reload')); // dispatch some error message\n    }\n\n    dispatch(actionCreator.finishLoading()); // dispatch isLoading to false\n  };\n\n  const isLoading = useSelector(selector.isLoading);\n  const todos = useSelector(selector.getLoadedTodos);\n  const errorMessage = useSelector(selector.getMessage);\n\n\n  return (\n    isLoading\n      ? (\n        <button className=\"btn btn-primary\" type=\"button\" disabled>\n          <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\" />\n          Loading...\n        </button>\n      )\n      : (\n        <>\n          <button\n            className=\"btn btn-primary\"\n            type=\"button\"\n            onClick={handleLoadClick}\n            hidden={todos.length !== 0}\n          >\n            <span role=\"status\" aria-hidden=\"true\" />\n            Load\n          </button>\n          <p\n            className=\"alert alert-primary mt5\"\n            hidden={errorMessage === ''}\n            role=\"alert\"\n          >\n            {`¯\\\\_(ツ)_/¯ ${errorMessage}`}\n          </p>\n        </>\n      )\n  );\n};\n\nexport default LoadingButtons;\n","/* eslint-disable import/no-duplicates */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as selector from '../store';\nimport * as actionCreator from '../store';\n\nconst SortButtons = () => {\n  const todos = useSelector(selector.getLoadedTodos);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"sorting-btns\" hidden={todos.length === 0}>\n      <button\n        type=\"button\"\n        className=\"btn btn-success btn-sort\"\n        onClick={() => dispatch(actionCreator.setSortBy('title'))}\n      >\n        Sort by Title\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-danger btn-sort\"\n        onClick={() => dispatch(actionCreator.setSortBy('id'))}\n      >\n        Sort by ID\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-warning btn-sort\"\n        onClick={() => dispatch(actionCreator.setSortBy('user'))}\n      >\n        Sort by User\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-secondary btn-sort\"\n        onClick={() => dispatch(actionCreator.setSortBy(''))}\n      >\n        RESET\n      </button>\n    </div>\n  );\n};\n\nexport default SortButtons;\n","/* eslint-disable import/no-duplicates */\nimport React from 'react';\nimport './App.scss';\n\nimport TodoList from './components/TodosList';\nimport LoadingButtons from './components/LoadingButtons';\nimport SortButtons from './components/SortButtons';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>Redux list of todos</h1>\n      <LoadingButtons />\n\n      <SortButtons />\n\n      <TodoList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}